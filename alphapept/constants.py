# AUTOGENERATED! DO NOT EDIT! File to edit: nbs\10_constants.ipynb (unless otherwise specified).

__all__ = ['AAs', 'mass_dict', 'get_mass_dict', 'Isotope', 'spec', 'isotopes', 'averagine_aa', 'averagine_avg',
           'protease_dict']

# Cell
AAs = set('ACDEFGHIKLMNPQRSTUVWY')

# Cell
from numba import types
from numba.typed import Dict

mass_dict = Dict.empty(key_type=types.unicode_type, value_type=types.float64)

mass_dict["A"] = 71.03711379999999
mass_dict["C"] = 103.0091845
mass_dict["D"] = 115.02694309999998
mass_dict["E"] = 129.04259309999998
mass_dict["F"] = 147.0684139
mass_dict["G"] = 57.02146373
mass_dict["H"] = 137.0589119
mass_dict["I"] = 113.08406399999998
mass_dict["K"] = 128.09496299999998
mass_dict["L"] = 113.08406399999998
mass_dict["M"] = 131.04048459999998
mass_dict["N"] = 114.04292749999999
mass_dict["P"] = 97.05276386
mass_dict["Q"] = 128.05857749999998
mass_dict["R"] = 156.101111
mass_dict["S"] = 87.03202843
mass_dict["T"] = 101.0476785
mass_dict["U"] = 150.9536333957
mass_dict["V"] = 99.06841392
mass_dict["W"] = 186.07931299999998
mass_dict["Y"] = 163.06332859999998
mass_dict["cC"] = 160.03064823
mass_dict["oxM"] = 147.03539923
mass_dict["aA"] = 113.04767848999998
mass_dict["aC"] = 145.01974919
mass_dict["aD"] = 157.03750778999998
mass_dict["aE"] = 171.05315778999997
mass_dict["aF"] = 189.07897859
mass_dict["aG"] = 99.03202842
mass_dict["aH"] = 179.06947659
mass_dict["aI"] = 155.09462868999998
mass_dict["aK"] = 170.10552768999997
mass_dict["aL"] = 155.09462868999998
mass_dict["aM"] = 173.05104928999998
mass_dict["aN"] = 156.05349219
mass_dict["aP"] = 139.06332855
mass_dict["aQ"] = 170.06914218999998
mass_dict["aR"] = 198.11167569
mass_dict["aS"] = 129.04259312
mass_dict["aT"] = 143.05824319
mass_dict["aU"] = 192.9641980857
mass_dict["aV"] = 141.07897861
mass_dict["aW"] = 228.08987768999998
mass_dict["aY"] = 205.07389328999997
mass_dict["amA"] = 70.05309820699999
mass_dict["amC"] = 102.02516890700001
mass_dict["amD"] = 114.04292750699999
mass_dict["amE"] = 128.05857750699997
mass_dict["amF"] = 146.084398307
mass_dict["amG"] = 56.037448137
mass_dict["amH"] = 136.074896307
mass_dict["amI"] = 112.10004840699999
mass_dict["amK"] = 127.11094740699998
mass_dict["amL"] = 112.10004840699999
mass_dict["amM"] = 130.05646900699998
mass_dict["amN"] = 113.058911907
mass_dict["amP"] = 96.068748267
mass_dict["amQ"] = 127.07456190699999
mass_dict["amR"] = 155.117095407
mass_dict["amS"] = 86.048012837
mass_dict["amT"] = 100.06366290700001
mass_dict["amU"] = 149.9696178027
mass_dict["amV"] = 98.084398327
mass_dict["amW"] = 185.09529740699998
mass_dict["amY"] = 162.07931300699997
mass_dict["pS"] = 166.99835935
mass_dict["pT"] = 181.01400942
mass_dict["pY"] = 243.02965952
mass_dict["deamN"] = 115.02694309299999
mass_dict["deamNQ"] = 129.042593093
mass_dict["n"] = 467.2655281
mass_dict["pgE"] = 111.03202840999998
mass_dict["pgQ"] = 111.03202839999999
mass_dict["eA"] = 337.1209813
mass_dict["eC"] = 369.093052
mass_dict["eD"] = 381.1108106
mass_dict["eE"] = 395.1264606
mass_dict["eF"] = 413.1522814
mass_dict["eG"] = 323.10533123
mass_dict["eH"] = 403.1427794
mass_dict["eI"] = 379.1679315
mass_dict["eK"] = 394.1788305
mass_dict["eL"] = 379.1679315
mass_dict["eM"] = 397.1243521
mass_dict["eN"] = 380.126795
mass_dict["eP"] = 363.13663136
mass_dict["eQ"] = 394.14244499999995
mass_dict["eR"] = 422.1849785
mass_dict["eS"] = 353.11589592999997
mass_dict["eT"] = 367.131546
mass_dict["eU"] = 417.03750089569996
mass_dict["eV"] = 365.15228142
mass_dict["eW"] = 452.16318049999995
mass_dict["eY"] = 429.1471961
mass_dict["amoxM"] = 146.05138359999998
mass_dict["aoxM"] = 189.0459646
mass_dict["camC"] = 159.04663250000002
mass_dict["acC"] = 202.0412135

mass_dict["Electron"] = 0.00054857990907
mass_dict["Proton"] = 1.00727646687
mass_dict["Hydrogen"] = 1.00782503223
mass_dict["C13"] = 13.003354835
mass_dict["Oxygen"] = 15.994914619
mass_dict["OH"] = 17.002739651229998
mass_dict["H2O"] = 18.01056468346

mass_dict["delta_M"] = 1.00286864
mass_dict["delta_S"] = 0.0109135

# Cell
def get_mass_dict(modfile="modifications.tsv", aasfile="amino_acids.tsv"):
    """
    Creates a mass_dict based on tsv files

    Args:
        modfile: Filename of modifications file
        aasfile: Filename of AAs file

    Returns:
        Returns a numba compatible dictionary with masses

    Raises:
        FileNotFoundError: If files are not found
    """

    for file in [modfile, aasfile]:
        if not check_file(file):
            raise FileNotFoundError("File {} not found.".format(file))

    mods = pd.read_csv(modfile, delimiter="\t")
    aas = pd.read_csv(aasfile, delimiter="\t")

    mass_dict = Dict.empty(key_type=types.unicode_type, value_type=types.float64)

    for identifier, mass in aas[["Identifier", "Monoisotopic Mass (Da)"]].values:
        mass_dict[identifier] = float(mass)

    for identifier, aar, mass in mods[
        ["Identifier", "Amino Acid Residue", "Monoisotopic Mass Shift (Da)"]
    ].values:
        print(identifier, aar, mass)

        if ("<" in identifier) or (">" in identifier):
            for aa_identifier, aa_mass in aas[
                ["Identifier", "Monoisotopic Mass (Da)"]
            ].values:
                new_identifier = identifier[:-1] + aa_identifier
                mass_dict[new_identifier] = float(mass) + mass_dict[aa_identifier]
        else:
            mass_dict[identifier] = float(mass) + mass_dict[aar]

    # Manually add some other masses
    # TODO: Move to file
    mass_dict[
        "Electron"
    ] = (
        0.000548579909070
    )  # electron mass, half a millimass error if not taken into account
    mass_dict["Proton"] = 1.00727646687  # proton mass
    mass_dict["Hydrogen"] = 1.00782503223  # hydrogen mass
    mass_dict["C13"] = 13.003354835  # C13 mass
    mass_dict["Oxygen"] = 15.994914619  # oxygen mass
    mass_dict["OH"] = mass_dict["Oxygen"] + mass_dict["Hydrogen"]  # OH mass
    mass_dict["H2O"] = mass_dict["Oxygen"] + 2 * mass_dict["Hydrogen"]  # H2O mass

    for element in mass_dict:
        print('mass_dict["{}"] = {}'.format(element, mass_dict[element]))

    return mass_dict

# Cell
import numpy as np
from numba import int32, float32, float64, jitclass, njit, types
from numba.typed import Dict

spec = [
    ('m0', float32),
    ('dm', int32),
    ('intensities', float32[:]),
]

@jitclass(spec)
class Isotope:
    def __init__(self, m0, dm, intensities):
        self.m0 = m0
        self.dm = dm
        self.intensities = intensities

isotopes = Dict.empty(key_type=types.unicode_type, value_type=Isotope.class_type.instance_type)

isotopes["C"] = Isotope(12, 3, np.array([0.9893, 0.0107, 0.0], dtype=np.float32))
isotopes["H"] = Isotope(1.007940, 3,  np.array([0.999885, 0.000115, 0.0], dtype=np.float32))
isotopes["O"] = Isotope(15.9949146221, 3,  np.array([0.99757, 0.00038, 0.00205], dtype=np.float32))
isotopes["N"] = Isotope(14.0030740052, 2,  np.array([0.99636, 0.00364], dtype=np.float32))
isotopes["S"] = Isotope(31.97207069, 4,  np.array([0.9499, 0.0075, 0.0425, 0.0001], dtype=np.float32))

isotopes["I"] = Isotope(126.904473, 1,  np.array([1], dtype=np.float32))
isotopes["K"] = Isotope(38.9637069, 3,  np.array([0.932581, 0.000117, 0.067302], dtype=np.float32))

# Cell
averagine_aa = Dict.empty(key_type=types.unicode_type, value_type=types.float64)

averagine_aa["C"] = 4.9384
averagine_aa["H"] = 7.7583
averagine_aa["N"] = 1.3577
averagine_aa["O"] = 1.4773
averagine_aa["S"] = 0.0417

averagine_avg = 111.1254

# Cell
protease_dict = Dict.empty(key_type=types.unicode_type, value_type=types.unicode_type)

protease_dict["arg-c"] = "R"
protease_dict["asp-n"] = "\w(?=D)"
protease_dict["bnps-skatole"] = "W"
protease_dict["caspase 1"] = "(?<=[FWYL]\w[HAT])D(?=[^PEDQKR])"
protease_dict["caspase 2"] = "(?<=DVA)D(?=[^PEDQKR])"
protease_dict["caspase 3"] = "(?<=DMQ)D(?=[^PEDQKR])"
protease_dict["caspase 4"] = "(?<=LEV)D(?=[^PEDQKR])"
protease_dict["caspase 5"] = "(?<=[LW]EH)D"
protease_dict["caspase 6"] = "(?<=VE[HI])D(?=[^PEDQKR])"
protease_dict["caspase 7"] = "(?<=DEV)D(?=[^PEDQKR])"
protease_dict["caspase 8"] = "(?<=[IL]ET)D(?=[^PEDQKR])"
protease_dict["caspase 9"] = "(?<=LEH)D"
protease_dict["caspase 10"] = "(?<=IEA)D"
protease_dict["chymotrypsin high specificity"] = "([FY](?=[^P]))|(W(?=[^MP]))"
protease_dict["chymotrypsin low specificity"] = "([FLY](?=[^P]))|(W(?=[^MP]))|(M(?=[^PY]))|(H(?=[^DMPW]))"
protease_dict["clostripain"] = "R"
protease_dict["cnbr"] = "M"
protease_dict["enterokinase"] = "(?<=[DE]{3})K"
protease_dict["factor xa"] = "(?<=[AFGILTVM][DE]G)R"
protease_dict["formic acid"] = "D"
protease_dict["glutamyl endopeptidase"] = "E"
protease_dict["granzyme b"] = "(?<=IEP)D"
protease_dict["hydroxylamine"] = "N(?=G)"
protease_dict["iodosobenzoic acid"] = "W"
protease_dict["lysc"] = "K"
protease_dict["ntcb"] = "\w(?=C)"
protease_dict["pepsin ph1.3"] = "((?<=[^HKR][^P])[^R](?=[FL][^P]))|((?<=[^HKR][^P])[FL](?=\w[^P]))"
protease_dict["pepsin ph2.0"] = "((?<=[^HKR][^P])[^R](?=[FLWY][^P]))|((?<=[^HKR][^P])[FLWY](?=\w[^P]))"
protease_dict["proline endopeptidase"] = "(?<=[HKR])P(?=[^P])"
protease_dict["proteinase k"] = "[AEFILTVWY]"
protease_dict["staphylococcal peptidase i"] = "(?<=[^E])E"
protease_dict["thermolysin"] = "[^DE](?=[AFILMV])"
protease_dict["thrombin"] = "((?<=G)R(?=G))|((?<=[AFGILTVM][AFGILTVWA]P)R(?=[^DE][^DE]))"
protease_dict["trypsin_full"] = "([KR](?=[^P]))|((?<=W)K(?=P))|((?<=M)R(?=P))"
protease_dict["trypsin_exception"] = "((?<=[CD])K(?=D))|((?<=C)K(?=[HY]))|((?<=C)R(?=K))|((?<=R)R(?=[HR]))"
protease_dict["non-specific"] = "()"
protease_dict["trypsin"] = "([KR](?=[^P]))"