# Autogenerated by nbdev

d = { 'settings': { 'branch': 'master',
                'doc_baseurl': '/alphapept',
                'doc_host': 'https://mannlabs.github.io',
                'git_url': 'https://github.com/mannlabs/alphapept',
                'lib_path': 'alphapept'},
  'syms': { 'alphapept.additional_code': {},
            'alphapept.chem': { 'alphapept.chem.IsotopeDistribution': ('chem.html#isotopedistribution', 'alphapept/chem.py'),
                                'alphapept.chem.IsotopeDistribution.__init__': ( 'chem.html#isotopedistribution.__init__',
                                                                                 'alphapept/chem.py'),
                                'alphapept.chem.IsotopeDistribution.add': ('chem.html#isotopedistribution.add', 'alphapept/chem.py'),
                                'alphapept.chem.IsotopeDistribution.copy': ('chem.html#isotopedistribution.copy', 'alphapept/chem.py'),
                                'alphapept.chem.IsotopeDistribution.mult': ('chem.html#isotopedistribution.mult', 'alphapept/chem.py'),
                                'alphapept.chem.calculate_mass': ('chem.html#calculate_mass', 'alphapept/chem.py'),
                                'alphapept.chem.dict_to_dist': ('chem.html#dict_to_dist', 'alphapept/chem.py'),
                                'alphapept.chem.fast_add': ('chem.html#fast_add', 'alphapept/chem.py'),
                                'alphapept.chem.get_average_formula': ('chem.html#get_average_formula', 'alphapept/chem.py'),
                                'alphapept.chem.mass_to_dist': ('chem.html#mass_to_dist', 'alphapept/chem.py'),
                                'alphapept.chem.numba_bin': ('chem.html#numba_bin', 'alphapept/chem.py')},
            'alphapept.constants': { 'alphapept.constants.Isotope': ('constants.html#isotope', 'alphapept/constants.py'),
                                     'alphapept.constants.Isotope.__init__': ('constants.html#isotope.__init__', 'alphapept/constants.py'),
                                     'alphapept.constants.get_mass_dict': ('constants.html#get_mass_dict', 'alphapept/constants.py')},
            'alphapept.contributing': { 'alphapept.contributing.sample_function': ( 'contributing.html#sample_function',
                                                                                    'alphapept/contributing.py')},
            'alphapept.display': { 'alphapept.display.calculate_sequence_coverage': ( 'display.html#calculate_sequence_coverage',
                                                                                      'alphapept/display.py')},
            'alphapept.export': { 'alphapept.export.ap_to_mq_sequence': ('export.html#ap_to_mq_sequence', 'alphapept/export.py'),
                                  'alphapept.export.prepare_ap_results': ('export.html#prepare_ap_results', 'alphapept/export.py'),
                                  'alphapept.export.remove_mods': ('export.html#remove_mods', 'alphapept/export.py')},
            'alphapept.ext.bruker.timsdata': {},
            'alphapept.ext.bruker.tsfdata': {},
            'alphapept.fasta': { 'alphapept.fasta.add_decoy_tag': ('fasta.html#add_decoy_tag', 'alphapept/fasta.py'),
                                 'alphapept.fasta.add_fixed_mod_terminal': ('fasta.html#add_fixed_mod_terminal', 'alphapept/fasta.py'),
                                 'alphapept.fasta.add_fixed_mods': ('fasta.html#add_fixed_mods', 'alphapept/fasta.py'),
                                 'alphapept.fasta.add_fixed_mods_terminal': ('fasta.html#add_fixed_mods_terminal', 'alphapept/fasta.py'),
                                 'alphapept.fasta.add_to_pept_dict': ('fasta.html#add_to_pept_dict', 'alphapept/fasta.py'),
                                 'alphapept.fasta.add_variable_mod': ('fasta.html#add_variable_mod', 'alphapept/fasta.py'),
                                 'alphapept.fasta.add_variable_mods': ('fasta.html#add_variable_mods', 'alphapept/fasta.py'),
                                 'alphapept.fasta.add_variable_mods_terminal': ( 'fasta.html#add_variable_mods_terminal',
                                                                                 'alphapept/fasta.py'),
                                 'alphapept.fasta.block_idx': ('fasta.html#block_idx', 'alphapept/fasta.py'),
                                 'alphapept.fasta.blocks': ('fasta.html#blocks', 'alphapept/fasta.py'),
                                 'alphapept.fasta.check_peptide': ('fasta.html#check_peptide', 'alphapept/fasta.py'),
                                 'alphapept.fasta.check_sequence': ('fasta.html#check_sequence', 'alphapept/fasta.py'),
                                 'alphapept.fasta.cleave_sequence': ('fasta.html#cleave_sequence', 'alphapept/fasta.py'),
                                 'alphapept.fasta.count_internal_cleavages': ('fasta.html#count_internal_cleavages', 'alphapept/fasta.py'),
                                 'alphapept.fasta.count_missed_cleavages': ('fasta.html#count_missed_cleavages', 'alphapept/fasta.py'),
                                 'alphapept.fasta.digest_fasta_block': ('fasta.html#digest_fasta_block', 'alphapept/fasta.py'),
                                 'alphapept.fasta.generate_database': ('fasta.html#generate_database', 'alphapept/fasta.py'),
                                 'alphapept.fasta.generate_database_parallel': ( 'fasta.html#generate_database_parallel',
                                                                                 'alphapept/fasta.py'),
                                 'alphapept.fasta.generate_fasta_list': ('fasta.html#generate_fasta_list', 'alphapept/fasta.py'),
                                 'alphapept.fasta.generate_peptides': ('fasta.html#generate_peptides', 'alphapept/fasta.py'),
                                 'alphapept.fasta.generate_spectra': ('fasta.html#generate_spectra', 'alphapept/fasta.py'),
                                 'alphapept.fasta.get_decoy_sequence': ('fasta.html#get_decoy_sequence', 'alphapept/fasta.py'),
                                 'alphapept.fasta.get_decoys': ('fasta.html#get_decoys', 'alphapept/fasta.py'),
                                 'alphapept.fasta.get_frag_dict': ('fasta.html#get_frag_dict', 'alphapept/fasta.py'),
                                 'alphapept.fasta.get_fragmass': ('fasta.html#get_fragmass', 'alphapept/fasta.py'),
                                 'alphapept.fasta.get_isoforms': ('fasta.html#get_isoforms', 'alphapept/fasta.py'),
                                 'alphapept.fasta.get_missed_cleavages': ('fasta.html#get_missed_cleavages', 'alphapept/fasta.py'),
                                 'alphapept.fasta.get_precmass': ('fasta.html#get_precmass', 'alphapept/fasta.py'),
                                 'alphapept.fasta.get_spectra': ('fasta.html#get_spectra', 'alphapept/fasta.py'),
                                 'alphapept.fasta.get_spectrum': ('fasta.html#get_spectrum', 'alphapept/fasta.py'),
                                 'alphapept.fasta.get_unique_peptides': ('fasta.html#get_unique_peptides', 'alphapept/fasta.py'),
                                 'alphapept.fasta.list_to_numba': ('fasta.html#list_to_numba', 'alphapept/fasta.py'),
                                 'alphapept.fasta.merge_pept_dicts': ('fasta.html#merge_pept_dicts', 'alphapept/fasta.py'),
                                 'alphapept.fasta.parse': ('fasta.html#parse', 'alphapept/fasta.py'),
                                 'alphapept.fasta.pept_dict_from_search': ('fasta.html#pept_dict_from_search', 'alphapept/fasta.py'),
                                 'alphapept.fasta.read_database': ('fasta.html#read_database', 'alphapept/fasta.py'),
                                 'alphapept.fasta.read_fasta_file': ('fasta.html#read_fasta_file', 'alphapept/fasta.py'),
                                 'alphapept.fasta.read_fasta_file_entries': ('fasta.html#read_fasta_file_entries', 'alphapept/fasta.py'),
                                 'alphapept.fasta.save_database': ('fasta.html#save_database', 'alphapept/fasta.py'),
                                 'alphapept.fasta.swap_AL': ('fasta.html#swap_al', 'alphapept/fasta.py'),
                                 'alphapept.fasta.swap_KR': ('fasta.html#swap_kr', 'alphapept/fasta.py')},
            'alphapept.feature_finding': { 'alphapept.feature_finding.check_averagine': ( 'feature_finding.html#check_averagine',
                                                                                          'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.check_isotope_pattern': ( 'feature_finding.html#check_isotope_pattern',
                                                                                                'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.check_isotope_pattern_directed': ( 'feature_finding.html#check_isotope_pattern_directed',
                                                                                                         'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.check_large_hills': ( 'feature_finding.html#check_large_hills',
                                                                                            'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.connect_centroids': ( 'feature_finding.html#connect_centroids',
                                                                                            'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.connect_centroids_unidirection': ( 'feature_finding.html#connect_centroids_unidirection',
                                                                                                         'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.convert_bruker': ( 'feature_finding.html#convert_bruker',
                                                                                         'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.convert_connections_to_array': ( 'feature_finding.html#convert_connections_to_array',
                                                                                                       'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.correlate': ( 'feature_finding.html#correlate',
                                                                                    'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.cosine_averagine': ( 'feature_finding.html#cosine_averagine',
                                                                                           'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.edge_correlation': ( 'feature_finding.html#edge_correlation',
                                                                                           'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.eliminate_overarching_vertex': ( 'feature_finding.html#eliminate_overarching_vertex',
                                                                                                       'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.extract_bruker': ( 'feature_finding.html#extract_bruker',
                                                                                         'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.extract_edge': ( 'feature_finding.html#extract_edge',
                                                                                       'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.extract_hills': ( 'feature_finding.html#extract_hills',
                                                                                        'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.fast_minima': ( 'feature_finding.html#fast_minima',
                                                                                      'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.feature_finder_report': ( 'feature_finding.html#feature_finder_report',
                                                                                                'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.fill_path_matrix': ( 'feature_finding.html#fill_path_matrix',
                                                                                           'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.filter_hills': ( 'feature_finding.html#filter_hills',
                                                                                       'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.find_centroid_connections': ( 'feature_finding.html#find_centroid_connections',
                                                                                                    'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.find_features': ( 'feature_finding.html#find_features',
                                                                                        'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.find_path_length': ( 'feature_finding.html#find_path_length',
                                                                                           'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.find_path_start': ( 'feature_finding.html#find_path_start',
                                                                                          'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.get_hill_data': ( 'feature_finding.html#get_hill_data',
                                                                                        'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.get_hills': ( 'feature_finding.html#get_hills',
                                                                                    'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.get_isotope_patterns': ( 'feature_finding.html#get_isotope_patterns',
                                                                                               'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.get_local_minima': ( 'feature_finding.html#get_local_minima',
                                                                                           'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.get_minpos': ( 'feature_finding.html#get_minpos',
                                                                                     'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.get_pre_isotope_patterns': ( 'feature_finding.html#get_pre_isotope_patterns',
                                                                                                   'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.get_stats': ( 'feature_finding.html#get_stats',
                                                                                    'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.get_trails': ( 'feature_finding.html#get_trails',
                                                                                     'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.grow': ('feature_finding.html#grow', 'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.grow_trail': ( 'feature_finding.html#grow_trail',
                                                                                     'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.hill_stats': ( 'feature_finding.html#hill_stats',
                                                                                     'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.int_list_to_array': ( 'feature_finding.html#int_list_to_array',
                                                                                            'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.is_local_minima': ( 'feature_finding.html#is_local_minima',
                                                                                          'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.isolate_isotope_pattern': ( 'feature_finding.html#isolate_isotope_pattern',
                                                                                                  'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.map_bruker': ( 'feature_finding.html#map_bruker',
                                                                                     'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.map_ms2': ( 'feature_finding.html#map_ms2',
                                                                                  'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.mz_to_mass': ( 'feature_finding.html#mz_to_mass',
                                                                                     'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.path_finder': ( 'feature_finding.html#path_finder',
                                                                                      'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.pattern_to_mz': ( 'feature_finding.html#pattern_to_mz',
                                                                                        'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.plot_pattern': ( 'feature_finding.html#plot_pattern',
                                                                                       'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.remove_duplicate_hills': ( 'feature_finding.html#remove_duplicate_hills',
                                                                                                 'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.remove_duplicates': ( 'feature_finding.html#remove_duplicates',
                                                                                            'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.replace_infs': ( 'feature_finding.html#replace_infs',
                                                                                       'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.report_': ( 'feature_finding.html#report_',
                                                                                  'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.split': ( 'feature_finding.html#split',
                                                                                'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.split_hills': ( 'feature_finding.html#split_hills',
                                                                                      'alphapept/feature_finding.py'),
                                           'alphapept.feature_finding.truncate': ( 'feature_finding.html#truncate',
                                                                                   'alphapept/feature_finding.py')},
            'alphapept.file_formats': {},
            'alphapept.gui.constants': {},
            'alphapept.gui.experiment': {},
            'alphapept.gui.fasta': {},
            'alphapept.gui.filewatcher': {},
            'alphapept.gui.history': {},
            'alphapept.gui.results': {},
            'alphapept.gui.start': {},
            'alphapept.gui.status': {},
            'alphapept.gui.utils': {},
            'alphapept.interface': { 'alphapept.interface.align': ('interface.html#align', 'alphapept/interface.py'),
                                     'alphapept.interface.bcolors': ('interface.html#bcolors', 'alphapept/interface.py'),
                                     'alphapept.interface.check_version_and_hardware': ( 'interface.html#check_version_and_hardware',
                                                                                         'alphapept/interface.py'),
                                     'alphapept.interface.cli_align': ('interface.html#cli_align', 'alphapept/interface.py'),
                                     'alphapept.interface.cli_database': ('interface.html#cli_database', 'alphapept/interface.py'),
                                     'alphapept.interface.cli_export': ('interface.html#cli_export', 'alphapept/interface.py'),
                                     'alphapept.interface.cli_feature_finding': ( 'interface.html#cli_feature_finding',
                                                                                  'alphapept/interface.py'),
                                     'alphapept.interface.cli_gui': ('interface.html#cli_gui', 'alphapept/interface.py'),
                                     'alphapept.interface.cli_import': ('interface.html#cli_import', 'alphapept/interface.py'),
                                     'alphapept.interface.cli_match': ('interface.html#cli_match', 'alphapept/interface.py'),
                                     'alphapept.interface.cli_overview': ('interface.html#cli_overview', 'alphapept/interface.py'),
                                     'alphapept.interface.cli_quantify': ('interface.html#cli_quantify', 'alphapept/interface.py'),
                                     'alphapept.interface.cli_recalibrate': ('interface.html#cli_recalibrate', 'alphapept/interface.py'),
                                     'alphapept.interface.cli_score': ('interface.html#cli_score', 'alphapept/interface.py'),
                                     'alphapept.interface.cli_search': ('interface.html#cli_search', 'alphapept/interface.py'),
                                     'alphapept.interface.cli_workflow': ('interface.html#cli_workflow', 'alphapept/interface.py'),
                                     'alphapept.interface.create_database': ('interface.html#create_database', 'alphapept/interface.py'),
                                     'alphapept.interface.export': ('interface.html#export', 'alphapept/interface.py'),
                                     'alphapept.interface.extract_median_unique': ( 'interface.html#extract_median_unique',
                                                                                    'alphapept/interface.py'),
                                     'alphapept.interface.feature_finding': ('interface.html#feature_finding', 'alphapept/interface.py'),
                                     'alphapept.interface.get_file_summary': ('interface.html#get_file_summary', 'alphapept/interface.py'),
                                     'alphapept.interface.get_summary': ('interface.html#get_summary', 'alphapept/interface.py'),
                                     'alphapept.interface.import_raw_data': ('interface.html#import_raw_data', 'alphapept/interface.py'),
                                     'alphapept.interface.is_port_in_use': ('interface.html#is_port_in_use', 'alphapept/interface.py'),
                                     'alphapept.interface.isobaric_labeling': ( 'interface.html#isobaric_labeling',
                                                                                'alphapept/interface.py'),
                                     'alphapept.interface.match': ('interface.html#match', 'alphapept/interface.py'),
                                     'alphapept.interface.parallel_execute': ('interface.html#parallel_execute', 'alphapept/interface.py'),
                                     'alphapept.interface.protein_grouping': ('interface.html#protein_grouping', 'alphapept/interface.py'),
                                     'alphapept.interface.quantification': ('interface.html#quantification', 'alphapept/interface.py'),
                                     'alphapept.interface.read_label_intensity': ( 'interface.html#read_label_intensity',
                                                                                   'alphapept/interface.py'),
                                     'alphapept.interface.recalibrate_data': ('interface.html#recalibrate_data', 'alphapept/interface.py'),
                                     'alphapept.interface.run_cli': ('interface.html#run_cli', 'alphapept/interface.py'),
                                     'alphapept.interface.run_complete_workflow': ( 'interface.html#run_complete_workflow',
                                                                                    'alphapept/interface.py'),
                                     'alphapept.interface.score': ('interface.html#score', 'alphapept/interface.py'),
                                     'alphapept.interface.search_data': ('interface.html#search_data', 'alphapept/interface.py'),
                                     'alphapept.interface.tqdm_wrapper': ('interface.html#tqdm_wrapper', 'alphapept/interface.py'),
                                     'alphapept.interface.wrapped_partial': ('interface.html#wrapped_partial', 'alphapept/interface.py')},
            'alphapept.io': { 'alphapept.io.HDF_File': ('io.html#hdf_file', 'alphapept/io.py'),
                              'alphapept.io.HDF_File.__eq__': ('io.html#hdf_file.__eq__', 'alphapept/io.py'),
                              'alphapept.io.HDF_File.__hash__': ('io.html#hdf_file.__hash__', 'alphapept/io.py'),
                              'alphapept.io.HDF_File.__init__': ('io.html#hdf_file.__init__', 'alphapept/io.py'),
                              'alphapept.io.HDF_File.__repr__': ('io.html#hdf_file.__repr__', 'alphapept/io.py'),
                              'alphapept.io.HDF_File.__str__': ('io.html#hdf_file.__str__', 'alphapept/io.py'),
                              'alphapept.io.HDF_File.check': ('io.html#hdf_file.check', 'alphapept/io.py'),
                              'alphapept.io.HDF_File.creation_time': ('io.html#hdf_file.creation_time', 'alphapept/io.py'),
                              'alphapept.io.HDF_File.directory': ('io.html#hdf_file.directory', 'alphapept/io.py'),
                              'alphapept.io.HDF_File.file_name': ('io.html#hdf_file.file_name', 'alphapept/io.py'),
                              'alphapept.io.HDF_File.is_overwritable': ('io.html#hdf_file.is_overwritable', 'alphapept/io.py'),
                              'alphapept.io.HDF_File.is_read_only': ('io.html#hdf_file.is_read_only', 'alphapept/io.py'),
                              'alphapept.io.HDF_File.last_updated': ('io.html#hdf_file.last_updated', 'alphapept/io.py'),
                              'alphapept.io.HDF_File.original_file_name': ('io.html#hdf_file.original_file_name', 'alphapept/io.py'),
                              'alphapept.io.HDF_File.read': ('io.html#hdf_file.read', 'alphapept/io.py'),
                              'alphapept.io.HDF_File.version': ('io.html#hdf_file.version', 'alphapept/io.py'),
                              'alphapept.io.HDF_File.write': ('io.html#hdf_file.write', 'alphapept/io.py'),
                              'alphapept.io.MS_Data_File': ('io.html#ms_data_file', 'alphapept/io.py'),
                              'alphapept.io.MS_Data_File._save_DDA_query_data': ( 'io.html#ms_data_file._save_dda_query_data',
                                                                                  'alphapept/io.py'),
                              'alphapept.io.MS_Data_File.import_raw_DDA_data': ( 'io.html#ms_data_file.import_raw_dda_data',
                                                                                 'alphapept/io.py'),
                              'alphapept.io.MS_Data_File.read_DDA_query_data': ( 'io.html#ms_data_file.read_dda_query_data',
                                                                                 'alphapept/io.py'),
                              'alphapept.io.__extract_nested': ('io.html#__extract_nested', 'alphapept/io.py'),
                              'alphapept.io._read_DDA_query_data': ('io.html#_read_dda_query_data', 'alphapept/io.py'),
                              'alphapept.io.centroid_data': ('io.html#centroid_data', 'alphapept/io.py'),
                              'alphapept.io.check_sanity': ('io.html#check_sanity', 'alphapept/io.py'),
                              'alphapept.io.extract_mq_settings': ('io.html#extract_mq_settings', 'alphapept/io.py'),
                              'alphapept.io.extract_mzml_info': ('io.html#extract_mzml_info', 'alphapept/io.py'),
                              'alphapept.io.gaussian_estimator': ('io.html#gaussian_estimator', 'alphapept/io.py'),
                              'alphapept.io.get_centroid': ('io.html#get_centroid', 'alphapept/io.py'),
                              'alphapept.io.get_local_intensity': ('io.html#get_local_intensity', 'alphapept/io.py'),
                              'alphapept.io.get_most_abundant': ('io.html#get_most_abundant', 'alphapept/io.py'),
                              'alphapept.io.get_peaks': ('io.html#get_peaks', 'alphapept/io.py'),
                              'alphapept.io.index_ragged_list': ('io.html#index_ragged_list', 'alphapept/io.py'),
                              'alphapept.io.list_to_numpy_f32': ('io.html#list_to_numpy_f32', 'alphapept/io.py'),
                              'alphapept.io.load_bruker_raw': ('io.html#load_bruker_raw', 'alphapept/io.py'),
                              'alphapept.io.load_mzml_data': ('io.html#load_mzml_data', 'alphapept/io.py'),
                              'alphapept.io.load_thermo_raw': ('io.html#load_thermo_raw', 'alphapept/io.py'),
                              'alphapept.io.one_over_k0_to_CCS': ('io.html#one_over_k0_to_ccs', 'alphapept/io.py'),
                              'alphapept.io.parse_mq_seq': ('io.html#parse_mq_seq', 'alphapept/io.py'),
                              'alphapept.io.raw_conversion': ('io.html#raw_conversion', 'alphapept/io.py')},
            'alphapept.label': { 'alphapept.label.find_labels': ('label.html#find_labels', 'alphapept/label.py'),
                                 'alphapept.label.label_search': ('label.html#label_search', 'alphapept/label.py'),
                                 'alphapept.label.search_label_on_ms_file': ('label.html#search_label_on_ms_file', 'alphapept/label.py')},
            'alphapept.matching': { 'alphapept.matching._calculate_deltas_abs': ( 'matching.html#_calculate_deltas_abs',
                                                                                  'alphapept/matching.py'),
                                    'alphapept.matching._calculate_deltas_rel': ( 'matching.html#_calculate_deltas_rel',
                                                                                  'alphapept/matching.py'),
                                    'alphapept.matching._get_offset_dict_and_columns_to_drop': ( 'matching.html#_get_offset_dict_and_columns_to_drop',
                                                                                                 'alphapept/matching.py'),
                                    'alphapept.matching.align': ('matching.html#align', 'alphapept/matching.py'),
                                    'alphapept.matching.align_datasets': ('matching.html#align_datasets', 'alphapept/matching.py'),
                                    'alphapept.matching.align_files': ('matching.html#align_files', 'alphapept/matching.py'),
                                    'alphapept.matching.calculate_deltas': ('matching.html#calculate_deltas', 'alphapept/matching.py'),
                                    'alphapept.matching.calculate_distance': ('matching.html#calculate_distance', 'alphapept/matching.py'),
                                    'alphapept.matching.calib_table': ('matching.html#calib_table', 'alphapept/matching.py'),
                                    'alphapept.matching.convert_decoy': ('matching.html#convert_decoy', 'alphapept/matching.py'),
                                    'alphapept.matching.get_probability': ('matching.html#get_probability', 'alphapept/matching.py'),
                                    'alphapept.matching.match_datasets': ('matching.html#match_datasets', 'alphapept/matching.py')},
            'alphapept.paths': {},
            'alphapept.performance': { 'alphapept.performance.AlphaPool': ('performance.html#alphapool', 'alphapept/performance.py'),
                                       'alphapept.performance.__copy_func': ('performance.html#__copy_func', 'alphapept/performance.py'),
                                       'alphapept.performance.compile_function': ( 'performance.html#compile_function',
                                                                                   'alphapept/performance.py'),
                                       'alphapept.performance.is_valid_compilation_mode': ( 'performance.html#is_valid_compilation_mode',
                                                                                            'alphapept/performance.py'),
                                       'alphapept.performance.performance_function': ( 'performance.html#performance_function',
                                                                                       'alphapept/performance.py'),
                                       'alphapept.performance.set_compilation_mode': ( 'performance.html#set_compilation_mode',
                                                                                       'alphapept/performance.py'),
                                       'alphapept.performance.set_worker_count': ( 'performance.html#set_worker_count',
                                                                                   'alphapept/performance.py')},
            'alphapept.pyrawfilereader': {},
            'alphapept.quantification': { 'alphapept.quantification.delayed_normalization': ( 'quantification.html#delayed_normalization',
                                                                                              'alphapept/quantification.py'),
                                          'alphapept.quantification.gaussian': ( 'quantification.html#gaussian',
                                                                                 'alphapept/quantification.py'),
                                          'alphapept.quantification.generate_dummy_data': ( 'quantification.html#generate_dummy_data',
                                                                                            'alphapept/quantification.py'),
                                          'alphapept.quantification.get_protein_ratios': ( 'quantification.html#get_protein_ratios',
                                                                                           'alphapept/quantification.py'),
                                          'alphapept.quantification.get_total_error': ( 'quantification.html#get_total_error',
                                                                                        'alphapept/quantification.py'),
                                          'alphapept.quantification.normalize_experiment_BFGS': ( 'quantification.html#normalize_experiment_bfgs',
                                                                                                  'alphapept/quantification.py'),
                                          'alphapept.quantification.normalize_experiment_SLSQP': ( 'quantification.html#normalize_experiment_slsqp',
                                                                                                   'alphapept/quantification.py'),
                                          'alphapept.quantification.protein_profile': ( 'quantification.html#protein_profile',
                                                                                        'alphapept/quantification.py'),
                                          'alphapept.quantification.protein_profile_parallel': ( 'quantification.html#protein_profile_parallel',
                                                                                                 'alphapept/quantification.py'),
                                          'alphapept.quantification.protein_profile_parallel_ap': ( 'quantification.html#protein_profile_parallel_ap',
                                                                                                    'alphapept/quantification.py'),
                                          'alphapept.quantification.protein_profile_parallel_mq': ( 'quantification.html#protein_profile_parallel_mq',
                                                                                                    'alphapept/quantification.py'),
                                          'alphapept.quantification.return_elution_profile': ( 'quantification.html#return_elution_profile',
                                                                                               'alphapept/quantification.py'),
                                          'alphapept.quantification.simulate_sample_profiles': ( 'quantification.html#simulate_sample_profiles',
                                                                                                 'alphapept/quantification.py'),
                                          'alphapept.quantification.solve_profile': ( 'quantification.html#solve_profile',
                                                                                      'alphapept/quantification.py'),
                                          'alphapept.quantification.triangle_error': ( 'quantification.html#triangle_error',
                                                                                       'alphapept/quantification.py')},
            'alphapept.recalibration': { 'alphapept.recalibration.align_run_to_db': ( 'recalibration.html#align_run_to_db',
                                                                                      'alphapept/recalibration.py'),
                                         'alphapept.recalibration.calibrate_fragments': ( 'recalibration.html#calibrate_fragments',
                                                                                          'alphapept/recalibration.py'),
                                         'alphapept.recalibration.calibrate_fragments_nn': ( 'recalibration.html#calibrate_fragments_nn',
                                                                                             'alphapept/recalibration.py'),
                                         'alphapept.recalibration.calibrate_hdf': ( 'recalibration.html#calibrate_hdf',
                                                                                    'alphapept/recalibration.py'),
                                         'alphapept.recalibration.chunks': ('recalibration.html#chunks', 'alphapept/recalibration.py'),
                                         'alphapept.recalibration.density_scatter': ( 'recalibration.html#density_scatter',
                                                                                      'alphapept/recalibration.py'),
                                         'alphapept.recalibration.get_calibration': ( 'recalibration.html#get_calibration',
                                                                                      'alphapept/recalibration.py'),
                                         'alphapept.recalibration.get_db_targets': ( 'recalibration.html#get_db_targets',
                                                                                     'alphapept/recalibration.py'),
                                         'alphapept.recalibration.kneighbors_calibration': ( 'recalibration.html#kneighbors_calibration',
                                                                                             'alphapept/recalibration.py'),
                                         'alphapept.recalibration.remove_outliers': ( 'recalibration.html#remove_outliers',
                                                                                      'alphapept/recalibration.py'),
                                         'alphapept.recalibration.save_fragment_calibration': ( 'recalibration.html#save_fragment_calibration',
                                                                                                'alphapept/recalibration.py'),
                                         'alphapept.recalibration.save_precursor_calibration': ( 'recalibration.html#save_precursor_calibration',
                                                                                                 'alphapept/recalibration.py'),
                                         'alphapept.recalibration.transform': ( 'recalibration.html#transform',
                                                                                'alphapept/recalibration.py')},
            'alphapept.score': { 'alphapept.score._get_limited_n_jobs': ('score.html#_get_limited_n_jobs', 'alphapept/score.py'),
                                 'alphapept.score.assign_proteins': ('score.html#assign_proteins', 'alphapept/score.py'),
                                 'alphapept.score.cut_fdr': ('score.html#cut_fdr', 'alphapept/score.py'),
                                 'alphapept.score.cut_global_fdr': ('score.html#cut_global_fdr', 'alphapept/score.py'),
                                 'alphapept.score.ecdf': ('score.html#ecdf', 'alphapept/score.py'),
                                 'alphapept.score.filter_precursor': ('score.html#filter_precursor', 'alphapept/score.py'),
                                 'alphapept.score.filter_score': ('score.html#filter_score', 'alphapept/score.py'),
                                 'alphapept.score.filter_with_ML': ('score.html#filter_with_ml', 'alphapept/score.py'),
                                 'alphapept.score.filter_with_score': ('score.html#filter_with_score', 'alphapept/score.py'),
                                 'alphapept.score.filter_with_x_tandem': ('score.html#filter_with_x_tandem', 'alphapept/score.py'),
                                 'alphapept.score.get_ML_features': ('score.html#get_ml_features', 'alphapept/score.py'),
                                 'alphapept.score.get_generic_score': ('score.html#get_generic_score', 'alphapept/score.py'),
                                 'alphapept.score.get_ion': ('score.html#get_ion', 'alphapept/score.py'),
                                 'alphapept.score.get_protein_groups': ('score.html#get_protein_groups', 'alphapept/score.py'),
                                 'alphapept.score.get_q_values': ('score.html#get_q_values', 'alphapept/score.py'),
                                 'alphapept.score.get_shared_proteins': ('score.html#get_shared_proteins', 'alphapept/score.py'),
                                 'alphapept.score.get_x_tandem_score': ('score.html#get_x_tandem_score', 'alphapept/score.py'),
                                 'alphapept.score.perform_protein_grouping': ('score.html#perform_protein_grouping', 'alphapept/score.py'),
                                 'alphapept.score.protein_grouping_all': ('score.html#protein_grouping_all', 'alphapept/score.py'),
                                 'alphapept.score.score_ML': ('score.html#score_ml', 'alphapept/score.py'),
                                 'alphapept.score.score_generic': ('score.html#score_generic', 'alphapept/score.py'),
                                 'alphapept.score.score_hdf': ('score.html#score_hdf', 'alphapept/score.py'),
                                 'alphapept.score.score_psms': ('score.html#score_psms', 'alphapept/score.py'),
                                 'alphapept.score.score_x_tandem': ('score.html#score_x_tandem', 'alphapept/score.py'),
                                 'alphapept.score.train_RF': ('score.html#train_rf', 'alphapept/score.py')},
            'alphapept.search': { 'alphapept.search.add_column': ('search.html#add_column', 'alphapept/search.py'),
                                  'alphapept.search.compare_frags': ('search.html#compare_frags', 'alphapept/search.py'),
                                  'alphapept.search.compare_spectrum_parallel': ( 'search.html#compare_spectrum_parallel',
                                                                                  'alphapept/search.py'),
                                  'alphapept.search.filter_top_n': ('search.html#filter_top_n', 'alphapept/search.py'),
                                  'alphapept.search.frag_delta': ('search.html#frag_delta', 'alphapept/search.py'),
                                  'alphapept.search.get_hits': ('search.html#get_hits', 'alphapept/search.py'),
                                  'alphapept.search.get_idxs': ('search.html#get_idxs', 'alphapept/search.py'),
                                  'alphapept.search.get_psms': ('search.html#get_psms', 'alphapept/search.py'),
                                  'alphapept.search.get_score_columns': ('search.html#get_score_columns', 'alphapept/search.py'),
                                  'alphapept.search.get_sequences': ('search.html#get_sequences', 'alphapept/search.py'),
                                  'alphapept.search.intensity_fraction': ('search.html#intensity_fraction', 'alphapept/search.py'),
                                  'alphapept.search.ion_extractor': ('search.html#ion_extractor', 'alphapept/search.py'),
                                  'alphapept.search.plot_psms': ('search.html#plot_psms', 'alphapept/search.py'),
                                  'alphapept.search.ppm_to_dalton': ('search.html#ppm_to_dalton', 'alphapept/search.py'),
                                  'alphapept.search.query_data_to_features': ('search.html#query_data_to_features', 'alphapept/search.py'),
                                  'alphapept.search.remove_column': ('search.html#remove_column', 'alphapept/search.py'),
                                  'alphapept.search.score': ('search.html#score', 'alphapept/search.py'),
                                  'alphapept.search.search_db': ('search.html#search_db', 'alphapept/search.py'),
                                  'alphapept.search.search_fasta_block': ('search.html#search_fasta_block', 'alphapept/search.py'),
                                  'alphapept.search.search_parallel': ('search.html#search_parallel', 'alphapept/search.py'),
                                  'alphapept.search.store_hdf': ('search.html#store_hdf', 'alphapept/search.py')},
            'alphapept.settings': { 'alphapept.settings.create_default_settings': ( 'settings.html#create_default_settings',
                                                                                    'alphapept/settings.py'),
                                    'alphapept.settings.hash_file': ('settings.html#hash_file', 'alphapept/settings.py'),
                                    'alphapept.settings.load_settings': ('settings.html#load_settings', 'alphapept/settings.py'),
                                    'alphapept.settings.load_settings_as_template': ( 'settings.html#load_settings_as_template',
                                                                                      'alphapept/settings.py'),
                                    'alphapept.settings.print_settings': ('settings.html#print_settings', 'alphapept/settings.py'),
                                    'alphapept.settings.save_settings': ('settings.html#save_settings', 'alphapept/settings.py')},
            'alphapept.stylesheets': {},
            'alphapept.test': {},
            'alphapept.utils': {},
            'alphapept.webui': {}}}
